IF OBJECT_ID('Sale') IS NOT NULL
DROP TABLE SALE;

IF OBJECT_ID('Product') IS NOT NULL
DROP TABLE PRODUCT;

IF OBJECT_ID('Customer') IS NOT NULL
DROP TABLE CUSTOMER;

IF OBJECT_ID('Location') IS NOT NULL
DROP TABLE LOCATION;

GO

CREATE TABLE CUSTOMER (
CUSTID	INT
, CUSTNAME	NVARCHAR(100)
, SALES_YTD	MONEY
, STATUS	NVARCHAR(7)
, PRIMARY KEY	(CUSTID) 
);


CREATE TABLE PRODUCT (
PRODID	INT
, PRODNAME	NVARCHAR(100)
, SELLING_PRICE	MONEY
, SALES_YTD	MONEY
, PRIMARY KEY	(PRODID)
);

CREATE TABLE SALE (
SALEID	BIGINT
, CUSTID	INT
, PRODID	INT
, QTY	INT
, PRICE	MONEY
, SALEDATE	DATE
, PRIMARY KEY 	(SALEID)
, FOREIGN KEY 	(CUSTID) REFERENCES CUSTOMER
, FOREIGN KEY 	(PRODID) REFERENCES PRODUCT
);

CREATE TABLE LOCATION (
  LOCID	NVARCHAR(5)
, MINQTY	INTEGER
, MAXQTY	INTEGER
, PRIMARY KEY 	(LOCID)
, CONSTRAINT CHECK_LOCID_LENGTH CHECK (LEN(LOCID) = 5)
, CONSTRAINT CHECK_MINQTY_RANGE CHECK (MINQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_RANGE CHECK (MAXQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_GREATER_MIXQTY CHECK (MAXQTY >= MINQTY)
);

IF OBJECT_ID('SALE_SEQ') IS NOT NULL
DROP SEQUENCE SALE_SEQ;
CREATE SEQUENCE SALE_SEQ;

GO

--STORE PROCEDURE #1 ADD_CUSTOMER 
IF OBJECT_ID('ADD_CUSTOMER') IS NOT NULL
DROP PROCEDURE ADD_CUSTOMER;
GO

CREATE PROCEDURE ADD_CUSTOMER @PCUSTID INT, @PCUSTNAME NVARCHAR(100) AS

BEGIN
    BEGIN TRY

        IF @PCUSTID < 1 OR @PCUSTID > 499
            THROW 50020, 'Customer ID out of range', 1

        INSERT INTO CUSTOMER (CUSTID, CUSTNAME, SALES_YTD, STATUS) 
        VALUES (@PCUSTID, @PCUSTNAME, 0, 'OK');

    END TRY
    BEGIN CATCH
        if ERROR_NUMBER() = 2627
            THROW 50010, 'Duplicate customer ID', 1
        ELSE IF ERROR_NUMBER() = 50020
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END; 
    END CATCH;

END;
GO

EXEC ADD_CUSTOMER @pcustid = 256, @pcustname = 'testdude1';
EXEC ADD_CUSTOMER @pcustid = 1, @pcustname = 'testdude2';
EXEC ADD_CUSTOMER @pcustid = 500, @pcustname = 'testdude3';

select * from customer;
GO

--STORE PROCEDURE #2 DELETE_ALL_CUSTOMERS
IF OBJECT_ID('DELETE_ALL_CUSTOMERS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_CUSTOMERS;
GO

CREATE PROCEDURE DELETE_ALL_CUSTOMERS @pcustid int AS 
BEGIN 
    BEGIN TRY
        DECLARE @count as INT; 
        SELECT @count = COUNT(*) FROM CUSTOMER; 
        DELETE FROM CUSTOMER;
        return @count; 
    END TRY
    BEGIN CATCH 
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE(); 
            THROW 50000, @ERRORMESSAGE, 1
    END CATCH 
END;

select * from customer;
--STORE PROCEDURE #3 ADD_PRODUCT 
GO

IF OBJECT_ID('ADD_PRODUCT') IS NOT NULL 
DROP PROCEDURE ADD_PRODUCT; 
GO 

CREATE PROCEDURE ADD_PRODUCT @pprodid INT, @pprodname NVARCHAR, @pprice MONEY AS 
BEGIN 
    BEGIN TRY 
        IF @pprodid > 2500 or @pprodid <1000
            THROW 500400, 'Product ID out of range', 1
        IF @pprice > 999.99 or @pprice < 0
            THROW 500500, 'Price out of range', 1
        INSERT INTO PRODUCT (PRODID, PRODNAME, SELLING_PRICE)
        VALUES (@pprodid, @pprodname, @pprice)
    END TRY 

    BEGIN CATCH 
        IF ERROR_NUMBER() = 50040 THROW
        IF ERROR_NUMBER() = 50050 THROW
        IF ERROR_NUMBER() = 2501 THROW 50030, 'Duplicate Product ID', 1
        ELSE
    BEGIN 
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE(); 
        THROW 50000, @ERRORMESSAGE, 1 
    END; 
END CATCH 
END; 

-- STORE PROCEDURE #4 DELETE_ALL_PRODUCTS 
GO 

IF OBJECT_ID('DELETE_ALL_CUSTOMERS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_CUSTOMERS;
GO

CREATE PROCEDURE DELETE_ALL_CUSTOMERS @pprodid int AS 
BEGIN 
    BEGIN TRY
        DECLARE @count as INT; 
        SELECT @count = COUNT(*) FROM PRODUCT; 
        DELETE FROM PRODUCT;
        return @count; 
    END TRY
    BEGIN CATCH 
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE(); 
            THROW 50000, @ERRORMESSAGE, 1
    END CATCH 
END;

--STORE PROCEDURE #5 
IF OBJECT_ID('GET_CUSTOMER_STRING') IS NOT NULL 
DROP PROCEDURE GET_CUSTOMER_STRING 
GO 

CREATE PROCEDURE GET_CUSTOMER_STRING @pcustid INT, @pReturnString NVARCHAR(100) OUTPUT AS
BEGIN  
    BEGIN TRY 
               
        

    END TRY 